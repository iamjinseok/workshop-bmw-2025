@page "/"
@using System.ComponentModel
@using Microsoft.SemanticKernel
@using wms_finish.Sqlite
@inject IChatClient ChatClient
@inject Kernel semanticKernel
@inject NavigationManager Nav
@implements IDisposable

<PageTitle>Chat</PageTitle>

<ChatHeader OnNewChat="@ResetConversationAsync" />

<ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
  <NoMessagesContent>
    <div>BMW Workshop 2025에 오신 것을 환경해요!</div>
  </NoMessagesContent>
</ChatMessageList>

<div class="chat-container">
  <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
</div>

@code {
  private const string SystemPrompt = @"
        당신은 창고의 재고 수량을 관리하는 역할을 가지고 있습니다.
        수량 확인이 안 되면 찾을 수 없다고 답변해주세요.";

  private readonly ChatOptions chatOptions = new();
  private readonly List<ChatMessage> messages = new();
  private CancellationTokenSource? currentResponseCancellation;
  private ChatMessage? currentResponseMessage;
  private ChatInput? chatInput;
  private ChatSuggestions? chatSuggestions;

  protected override void OnInitialized()
  {
    messages.Add(new(ChatRole.System, SystemPrompt));
  }

  private async Task AddUserMessageAsync(ChatMessage userMessage)
  {
    CancelAnyCurrentResponse();

    // Add the user message to the conversation
    messages.Add(userMessage);
    chatSuggestions?.Clear();
    await chatInput!.FocusAsync();

    // Stream and display a new response from the IChatClient
    var responseText = new Microsoft.Extensions.AI.TextContent("");
    currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);
    currentResponseCancellation = new();

    PromptExecutionSettings settings = new()
      {
        FunctionChoiceBehavior = FunctionChoiceBehavior.Auto()
    };
    KernelArguments arguments = new(settings);

    var response = await semanticKernel.InvokePromptAsync(userMessage.Text, arguments);
    responseText.Text = response.ToString();

    // Store the final response in the conversation, and begin getting suggestions
    messages.Add(currentResponseMessage!);
    currentResponseMessage = null;
    chatSuggestions?.Update(messages);
  }

    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        messages.Clear();
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();
    }

    [Description("Searches for information using a phrase or keyword")]
    private async Task<IEnumerable<string>> SearchAsync(
        [Description("The phrase to search for.")] string searchPhrase,
        [Description("If possible, specify the filename to search that file only. If not provided or empty, the search includes all files.")] string? filenameFilter = null)
    {
      return Enumerable.Empty<string>();
    }

    public void Dispose()
        => currentResponseCancellation?.Cancel();
}
